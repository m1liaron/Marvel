{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","direction","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","trueCharDescription","description","split","splice","join","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","imgStyle","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","_useState9","_useState10","useRef","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","focusOnItem","current","forEach","ref","classList","remove","add","focus","item","i","CSSTransition","timeout","classNames","el","onCharSelected","onKeyPres","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","CharInfo","charId","skeleton","CharSearchForm","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","err","errorInfo","console","log","this","setState","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.34a6a00a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.7725c6cd.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'}/>\n        <img style={{direction:'block', width:'250px', \n        height:'250px',objectFit:'contain', margin:'0 auto'}} \n        src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = '&apikey=ec3605c1d50d12ae1995f95b3750ae07';\n    const _baseOffset = 210;\n    // __Name - це прогромисти договорюються не змінювати тут нічого\n\n \n    const getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\n//    const getAllCharacters =  async(offset = _baseOffset) => {\n//         const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n    \n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\n   const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\nconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\n\n   const _transformCharacter = (char) => {\n        const trueCharDescription = char.description ? (char.description.length > 150 ? char.description.split('').splice(0, 100).join('') + \"...\" : char.description) : \"We don't have information about this character\";\n        return {\n            id:char.id,\n            name: char.name,\n            description: trueCharDescription,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension ,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items \n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id:comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount \n                    ? `${comics.pageCount} p.` \n                    : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || 'en-us',\n            price: comics.prices[0].price \n                    ? `${comics.prices[0].price}$` \n                    : 'not available',\n        };\n    }\n\n    return {\n        loading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n        }\n} \n\nexport default useMarvelService;","import { useState,  useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n   const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n    \n        setLoading(true);\n        \n        try {\n            const response = await fetch(url, {method,body,headers});\n            \n            if(!response.ok){\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data; \n        } catch(error) {\n            setError(error.message);\n            setLoading(false);\n            throw error;\n        }\n\n   }, []) \n\n   const clearError = useCallback(() => setError(null), []);\n\n   return {loading, request, error, clearError}\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService'\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null); \n    const {loading, error, getCharacter, clearError} = useMarvelService(); \n\n   useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n        clearInterval(timerId)\n    }\n   },[])\n   \n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n   const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n\n}\n\nconst View = ({ char }) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n        if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit' : 'unset'};\n        }\n\n    return (\n        <div className=\"randomchar__block\">\n        <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description}\n            </p>\n            <div className=\"randomchar__btns\">\n                <a href={homepage} className=\"button button__main\">\n                    <div className=\"inner\">homepage</div>\n                </a>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">wiki</div>\n                </a>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import React,{ useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [inProp, setInProp] = useState(true);\n    const nodeRef = useRef(null);\n\n    const {loading, error, getAllCharacters} = useMarvelService(); \n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    \n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n   const onCharListLoaded = (newCharList) => {\n\n        // const {logger, secodLog} = await import('./someFunc');\n        // logger()\n        \n        let ended = false;\n        if ( newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(setNewItemLoading => false);\n        setOffset(setOffset => offset + 9);\n        setCharEnded(setCharEnded => ended);\n    }\n\n   const itemRefs = useRef([]);\n    \n  const focusOnItem = (id) => {\n        itemRefs.current.forEach(ref => ref.classList.remove('char__item_selected'))\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n    \n    const duration = 300;\n\n   function renderItems(id){\n        const items = id.map((item,i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\"\n                    >\n                    <li  \n                    className=\"char__item\"\n                    key={item.id}\n                    ref={el => itemRefs.current[i] = el}\n                    onClick={() => {\n                        props.onCharSelected(item.id); \n                        focusOnItem(i) \n                    }}\n                    onKeyPres ={(e) => {\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i)\n                        }\n                    }}\n                    >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        ) \n    }\n\n\n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n        \n        // if (loading) {\n        //     import('./someFunc')\n        //         .then(obj => obj.default())\n        //         .catch()\n        // }\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\n\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService'\n\nconst CharInfo = (props) =>{\n            const [char, setChar] = useState(null);\n        \n        const {loading, error, getCharacter, clearError} = useMarvelService(); \n\n           useEffect(() => {\n            updateChar();\n           }, [props.charId])\n\n        const updateChar = () => {\n                const {charId} = props;\n                if(!charId){\n                    return;\n                }\n                clearError();\n\n                    getCharacter(charId)\n                    .then(onCharLoaded)\n           }\n\n       const onCharLoaded = (char) => {\n            setChar(char);\n        }\n\n            const skeleton = char || loading || error ? null : <Skeleton/>\n            const errorMessage = error ? <ErrorMessage/> : null;\n            const spinner = loading ? <Spinner/> : null;\n            const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n            return (\n                <div className=\"char__info\">\n                    {skeleton}\n                    {errorMessage}\n                    {spinner}\n                    {content}\n                </div>\n            )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n    return (\n        <>\n         <div className=\"char__basics\">\n                        <img style={imgStyle} src={thumbnail} alt={name}/>\n                        <div>\n                            <div className=\"char__info-name\">{name}</div>\n                            <div className=\"char__btns\">\n                                <a href={homepage} className=\"button button__main\">\n                                    <div className=\"inner\">homepage</div>\n                                </a>\n                                <a href={wiki} className=\"button button__secondary\">\n                                    <div className=\"inner\">Wiki</div>\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"char__descr\">\n                        {description}\n                    </div>\n                    <div className=\"char__comics\">Comics:</div>\n                    <ul className=\"char__comics-list\">\n                        {comics.length > 0  ? null : 'There is no comics with this character'}\n                        {\n                            comics.map((item, i) => {\n                                // eslint-disable-next-line\n                                if(i > 9) return;\n                                    return (\n                                        <>\n                                        \n                                        <li key={i} className=\"char__comics-item\">\n                                        {item.name}\n                                        </li>\n                                        \n                                        </>\n                                    )\n                            \n                            })\n                        }\n                    </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.string,\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './CharSearchForm.scss'\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // static getDerivedStateFromError(error) {\n    //     return { error: true }\n    // }\n\n    // getDerivedStateFromError - відновлює стан\n\n    componentDidCatch(err, errorInfo) {\n        console.log(err,errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return  <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n         setChar(id)\n     } \n\n    return (\n        <>\n    <ErrorBoundary>\n        <RandomChar/>\n    </ErrorBoundary>\n    <div className=\"char__content\">\n        \n        <ErrorBoundary>\n            <CharList onCharSelected={onCharSelected}/>\n        </ErrorBoundary>\n        \n        <div className=\"\">\n            <ErrorBoundary>\n                <CharInfo charId={selectedChar}/>\n            </ErrorBoundary>\n            <ErrorBoundary>\n                <CharSearchForm/>\n            </ErrorBoundary>\n        </div>\n    </div>\n    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}