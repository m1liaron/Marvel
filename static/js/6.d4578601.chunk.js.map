{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","direction","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","trueCharDescription","description","split","splice","join","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","AppBanner","_jsxs","className","children","avengers","avengersLogo","SinglePage","Component","dataType","useParams","setData","_useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/6.d4578601.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.7725c6cd.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'}/>\n        <img style={{direction:'block', width:'250px', \n        height:'250px',objectFit:'contain', margin:'0 auto'}} \n        src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = '&apikey=ec3605c1d50d12ae1995f95b3750ae07';\n    const _baseOffset = 210;\n    // __Name - це прогромисти договорюються не змінювати тут нічого\n\n \n    const getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\n//    const getAllCharacters =  async(offset = _baseOffset) => {\n//         const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n    \n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\n   const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\nconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\n\n   const _transformCharacter = (char) => {\n        const trueCharDescription = char.description ? (char.description.length > 150 ? char.description.split('').splice(0, 100).join('') + \"...\" : char.description) : \"We don't have information about this character\";\n        return {\n            id:char.id,\n            name: char.name,\n            description: trueCharDescription,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension ,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items \n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id:comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount \n                    ? `${comics.pageCount} p.` \n                    : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || 'en-us',\n            price: comics.prices[0].price \n                    ? `${comics.prices[0].price}$` \n                    : 'not available',\n        };\n    }\n\n    return {\n        loading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n        }\n} \n\nexport default useMarvelService;","import { useState,  useCallback } from 'react';\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n   const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n    \n        setLoading(true);\n        \n        try {\n            const response = await fetch(url, {method,body,headers});\n            \n            if(!response.ok){\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data; \n        } catch(error) {\n            setError(error.message);\n            setLoading(false);\n            throw error;\n        }\n\n   }, []) \n\n   const clearError = useCallback(() => setError(null), []);\n\n   return {loading, request, error, clearError}\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({Component, dataType}) => {\n    const {id} = useParams();\n    const [data, setData] = useState(null);\n    const { loading, error, getComic, getCharacter, clearError } = useMarvelService();\n    \n    useEffect(() => {\n            updateData()\n    }, [id])\n\n    const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id).then(onDataLoaded);\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded);\n            }\n    }\n    \n    const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n    return (\n            <>\n                <AppBanner/>\n                {errorMessage}\n                {spinner}\n                {content}\n            </>\n        )\n}\n\nexport default SinglePage;"],"sourceRoot":""}